{"ast":null,"code":"var _jsxFileName = \"/Users/mihailgeorgiev/Work/qr-payment/qr-react-ts/src/components/Cart/components/CardForm.tsx\",\n  _s = $RefreshSig$();\nimport { useStripe, useElements, PaymentElement } from \"@stripe/react-stripe-js\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CardForm = () => {\n  _s();\n  const [secret, setSecret] = useState(null);\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    fetch(\"/intent\").then(async res => {\n      const intent = await res.json();\n      setSecret(intent.clientSecret);\n    });\n  }, []);\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"/success\"\n      }\n    });\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !stripe,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(CardForm, \"WU1hxUh9g4+ACqkskEQRzxI4abE=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CardForm;\nvar _c;\n$RefreshReg$(_c, \"CardForm\");","map":{"version":3,"names":["useStripe","useElements","PaymentElement","useEffect","useState","jsxDEV","_jsxDEV","CardForm","_s","secret","setSecret","stripe","elements","fetch","then","res","intent","json","clientSecret","handleSubmit","event","preventDefault","result","confirmPayment","confirmParams","return_url","error","console","log","message","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["/Users/mihailgeorgiev/Work/qr-payment/qr-react-ts/src/components/Cart/components/CardForm.tsx"],"sourcesContent":["import {\n  useStripe,\n  useElements,\n  PaymentElement,\n} from \"@stripe/react-stripe-js\";\nimport { useEffect, useState } from \"react\";\n\nexport const CardForm = () => {\n  const [secret, setSecret] = useState(null);\n  const stripe = useStripe();\n  const elements = useElements();\n\n  useEffect(() => {\n    fetch(\"/intent\").then(async (res) => {\n      const intent = await res.json();\n      setSecret(intent.clientSecret);\n    });\n  }, []);\n\n  const handleSubmit = async (event: React.SyntheticEvent) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"/success\",\n      },\n    });\n\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      <button disabled={!stripe}>Pay</button>\n    </form>\n  );\n};\n"],"mappings":";;AAAA,SACEA,SAAS,EACTC,WAAW,EACXC,cAAc,QACT,yBAAyB;AAChC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAMO,MAAM,GAAGX,SAAS,CAAC,CAAC;EAC1B,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9BE,SAAS,CAAC,MAAM;IACdU,KAAK,CAAC,SAAS,CAAC,CAACC,IAAI,CAAC,MAAOC,GAAG,IAAK;MACnC,MAAMC,MAAM,GAAG,MAAMD,GAAG,CAACE,IAAI,CAAC,CAAC;MAC/BP,SAAS,CAACM,MAAM,CAACE,YAAY,CAAC;IAChC,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAG,MAAOC,KAA2B,IAAK;IAC1D;IACA;IACAA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,IAAI,CAACV,MAAM,IAAI,CAACC,QAAQ,EAAE;MACxB;MACA;MACA;IACF;IAEA,MAAMU,MAAM,GAAG,MAAMX,MAAM,CAACY,cAAc,CAAC;MACzC;MACAX,QAAQ;MACRY,aAAa,EAAE;QACbC,UAAU,EAAE;MACd;IACF,CAAC,CAAC;IAEF,IAAIH,MAAM,CAACI,KAAK,EAAE;MAChB;MACAC,OAAO,CAACC,GAAG,CAACN,MAAM,CAACI,KAAK,CAACG,OAAO,CAAC;IACnC,CAAC,MAAM;MACL;MACA;MACA;IAAA;EAEJ,CAAC;EACD,oBACEvB,OAAA;IAAMwB,QAAQ,EAAEX,YAAa;IAAAY,QAAA,gBAC3BzB,OAAA,CAACJ,cAAc;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClB7B,OAAA;MAAQ8B,QAAQ,EAAE,CAACzB,MAAO;MAAAoB,QAAA,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEX,CAAC;AAAC3B,EAAA,CA9CWD,QAAQ;EAAA,QAEJP,SAAS,EACPC,WAAW;AAAA;AAAAoC,EAAA,GAHjB9B,QAAQ;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}