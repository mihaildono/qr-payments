{"ast":null,"code":"var _jsxFileName = \"/Users/mihailgeorgiev/Work/qr-payment/qr-react-ts/src/components/Cart/components/CardForm.tsx\",\n  _s = $RefreshSig$();\nimport { useStripe, useElements, PaymentElement } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CardForm = ({\n  setStep\n}) => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"https://example.com/order/123/complete\"\n      }\n    });\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !stripe,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(CardForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CardForm;\nvar _c;\n$RefreshReg$(_c, \"CardForm\");","map":{"version":3,"names":["useStripe","useElements","PaymentElement","jsxDEV","_jsxDEV","CardForm","setStep","_s","stripe","elements","handleSubmit","event","preventDefault","result","confirmPayment","confirmParams","return_url","error","console","log","message","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["/Users/mihailgeorgiev/Work/qr-payment/qr-react-ts/src/components/Cart/components/CardForm.tsx"],"sourcesContent":["import {\n  useStripe,\n  useElements,\n  PaymentElement,\n} from \"@stripe/react-stripe-js\";\n\nimport { CardProps } from \"../types\";\n\nexport const CardForm = ({ setStep }: CardProps) => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event: React.SyntheticEvent) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"https://example.com/order/123/complete\",\n      },\n    });\n\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      <button disabled={!stripe}>\n        {/* <button onClick={() => setStep(2)} disabled={!stripe}> */}\n        Pay\n      </button>\n    </form>\n  );\n};\n"],"mappings":";;AAAA,SACEA,SAAS,EACTC,WAAW,EACXC,cAAc,QACT,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIjC,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAMC,MAAM,GAAGR,SAAS,CAAC,CAAC;EAC1B,MAAMS,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,YAAY,GAAG,MAAOC,KAA2B,IAAK;IAC1D;IACA;IACAA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,IAAI,CAACJ,MAAM,IAAI,CAACC,QAAQ,EAAE;MACxB;MACA;MACA;IACF;IAEA,MAAMI,MAAM,GAAG,MAAML,MAAM,CAACM,cAAc,CAAC;MACzC;MACAL,QAAQ;MACRM,aAAa,EAAE;QACbC,UAAU,EAAE;MACd;IACF,CAAC,CAAC;IAEF,IAAIH,MAAM,CAACI,KAAK,EAAE;MAChB;MACAC,OAAO,CAACC,GAAG,CAACN,MAAM,CAACI,KAAK,CAACG,OAAO,CAAC;IACnC,CAAC,MAAM;MACL;MACA;MACA;IAAA;EAEJ,CAAC;EACD,oBACEhB,OAAA;IAAMiB,QAAQ,EAAEX,YAAa;IAAAY,QAAA,gBAC3BlB,OAAA,CAACF,cAAc;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClBtB,OAAA;MAAQuB,QAAQ,EAAE,CAACnB,MAAO;MAAAc,QAAA,EACsC;IAEhE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX,CAAC;AAACnB,EAAA,CAzCWF,QAAQ;EAAA,QACJL,SAAS,EACPC,WAAW;AAAA;AAAA2B,EAAA,GAFjBvB,QAAQ;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}